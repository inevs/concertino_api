<?
  include_once ("../../../lib/inc.php");

  // try to find the recording

  $recordings = mysqlfetch ($mysql, "select concat(recording.work_id,'-',recording.apple_albumid,'-',recording.subset) as id, recording.observation as observation, recording.subset, recording.verified, recording.apple_albumid, recording.work_id as work, recording.composer_name as composer_name, recording.work_title as work_title, apple_imgurl as cover, performer, role from recording, recording_performer, playlist_recording where playlist_id = '{$_REQUEST["id"]}' and recording_performer.work_id = recording.work_id and recording_performer.subset = recording.subset and recording_performer.apple_albumid = recording.apple_albumid and playlist_recording.work_id = recording.work_id and playlist_recording.subset = recording.subset and playlist_recording.apple_albumid = recording.apple_albumid order by position desc, work asc, recording.apple_albumid asc, recording.subset asc");

  if (!$recordings)
  {
    // if the recording doesn't exist, return an error

    $apireturn["status"] = Array ("success"=>"false", "error"=>"No recordings found");
  }
  else
  {
    // playlist details

    $query = "select playlist.id as id, playlist.name as name, user.id as owner_id from playlist, user where user_id=user.id and playlist.id = '{$_REQUEST["id"]}'";
    $playlist = mysqlfetch ($mysql, $query);
    $apireturn["playlist"] = Array 
      (
        "id" => $playlist[0]["id"],
        "name" => $playlist[0]["name"],
        "owner" => Array 
          (
            "id" => $playlist[0]["owner_id"]
          )
      );

    // recordings

    // open opus api call

    foreach ($recordings as $rec)
    {
      if ($rec["composer_name"] == "")
      {
        if (is_int ($rec["work"])) $worklist[] = $rec["work"];
      }
    }

    if (sizeof ($worklist))
    {
      $obworks = openopusdownparse ("work/list/{$_REQUEST["cid"]}/ids/". implode (",", array_unique ($worklist)). ".json");
    }

    print_r ($obworks);
    
    foreach ($recordings as $rec)
    {
      if ($lastid != $rec["id"])
      {
        $id = $id + 1;

        if ($rec["composer_name"])
        {
          $vid = slug ($rec["composer_name"]. "-". $rec["work_title"]. "-". $id);
        }
        else
        {
          $vid = slug ($obworks["works"]["w:". $rec["work"]]["composer"]["name"]. "-". $obworks["works"]["w:". $rec["work"]]["title"]. "-". $id);
        }
        
        $apireturn["recordings"][$vid] = Array
          (
            "apple_albumid" => $rec["apple_albumid"],
            "set" => (Int) $rec["subset"],
            "cover" => $rec["cover"],
            "observation" => $rec["observation"],
            "verified" => $rec["verified"]
          );
      }

      $apireturn["recordings"][$vid]["performers"][] = Array ("name"=>$rec["performer"],"role"=>$rec["role"]);

      $apireturn["recordings"][$vid]["work"] = Array
        (
          "composer"=>Array
            (
              "id"=>($rec["composer_name"] ? "0" : $obworks["works"]["w:". $rec["work"]]["composer"]["id"]),
              "name"=>($rec["composer_name"] ? $rec["composer_name"] : $obworks["works"]["w:". $rec["work"]]["composer"]["name"]),
              "complete_name"=>($rec["composer_name"] ? $rec["composer_name"] : $obworks["works"]["w:". $rec["work"]]["composer"]["complete_name"]),
              "epoch"=>($rec["composer_name"] ? "None" : $obworks["works"]["w:". $rec["work"]]["composer"]["epoch"])
            ),
           "id"=>$rec["work"],
           "title"=>($rec["work_title"] ? $rec["work_title"] : $obworks["works"]["w:". $rec["work"]]["title"]),
           "genre"=>($rec["work_title"] ? "None" : $obworks["works"]["w:". $rec["work"]]["genre"]),
        );

      $lastid = $rec["id"];
    }

    $apirecordings = $apireturn["recordings"];

    foreach ($apirecordings as $apid => $apirec)
    {
      $apirecordings[$apid]["performers"] = orderperformers ($apirec["performers"]);
    }

    ksort ($apirecordings);
    $apireturn["recordings"] = array_values ($apirecordings);

    // checks apple music if recordings are available in the storefront

    if ($_REQUEST["country"])
    {
      foreach ($apireturn["recordings"] as $recs)
      {
          $plids[] = $recs["apple_albumid"];
      }

      $albids = implode (",", $plids);
      $chkalbs = appledownparse (APPLEMUSICAPI. "/catalog/{$_REQUEST["country"]}/albums?ids={$albids}", APPMUSTOKEN);

      foreach ($chkalbs["data"] as $albchk)
      {
          $albschkd[] = $albchk["id"];
      }

      foreach ($apireturn["recordings"] as $recss)
      {
        if (in_array ($recss["apple_albumid"], $albschkd))
        {
          $apireturn["valid-recordings"][] = $recss;
        }
      }

      $apireturn["recordings"] = $apireturn["valid-recordings"];
      unset($apireturn["valid-recordings"]);
    }
  }

  if (isset ($apireturn["recordings"]))
  {
    $apireturn["status"]["rows"] = sizeof ($apireturn["recordings"]);
    $apireturn["works"] = $obworks["abstract"];

    foreach ($recordings as $rec)
    {
      if ($rec["composer_name"])
      {
        $cn = end (explode (" ", $rec["composer_name"]));
        if (!in_array ($cn, $apireturn["works"]["composers"]["names"]))
        {
          $apireturn["works"]["composers"]["portraits"][] = OPENOPUS_DEFCOMP;
          $apireturn["works"]["composers"]["names"][] = $cn;
          $apireturn["works"]["works"]["rows"] += 1;
        }
      }
    }

    $apireturn["works"]["composers"]["rows"] = sizeof ($apireturn["works"]["composers"]["names"]);
  }

  if ($_REQUEST["country"])
  {
    echo savecache ("/recording/{$_REQUEST["country"]}/list/playlist/{$_REQUEST["id"]}.json", apireturn ($apireturn));
  }
  else
  {
    echo savecache ("/recording/list/playlist/{$_REQUEST["id"]}.json", apireturn ($apireturn));
  }
